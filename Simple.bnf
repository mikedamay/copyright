{
  parserClass="com.maddyhome.idea.copyright.language.parser.SimpleParser"
  parserUtilClass="com.maddyhome.idea.copyright.language.parser.SimpleParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Simple"
  psiImplClassSuffix="Impl"
  psiPackage="com.maddyhome.idea.copyright.language.psi"
  psiImplPackage="com.maddyhome.idea.copyright.language.psi.impl"

  elementTypeHolderClass="com.maddyhome.idea.copyright.language.psi.SimpleTypes"
  elementTypeClass="com.maddyhome.idea.copyright.language.psi.SimpleElementType"
  tokenTypeClass="com.maddyhome.idea.copyright.language.psi.SimpleTokenType"

}

simpleFile ::= item_*

statement ::= (ALIAS | AS | CASE | ELSE | EXPOSING | IF | IN | LET | MODULE | OF | PORT | THEN | TYPE )

operator ::= (LBRACE | RBRACE | LBRACK | RBRACK | COLON | EQ | ASSIGN | NOT_EQ | NOT | PLUS | MINUS | COND_OR | COND_AND
  | BIT_AND | SEND_CHANNEL | LESS | BIT_XOR | MUL | QUOTIENT | REMAINDER | GREATER
  | TILDE |PIPE_FORWARD | BACK_TICK | COMBINE | MULTIMAP | PIPE_BACK | GE | LE | COMBINE_BACK
  | COLON_COLON | INT_DIVIDE | DOT_DOT | DOT | RETURN )

private item_ ::= import_statement|module_statement|fun_decl|fun_def|COMMENT|STR|MULTILINE_COMMENT|CRLF|case_statement

module_statement ::= MODULE module_body WHERE CRLF
module_body ::= compound_identifier L_PAREN exposing_list R_PAREN

import_statement ::= IMPORT import_body
import_body ::= compound_identifier EXPOSING L_PAREN exposing_list R_PAREN CRLF
exposing_list ::= VALUE [(COMMA VALUE)*]

case_statement ::= CASE OF {methods [getKey getValue]}

fun_decl ::= VALUE COLON type_param (RETURN type_param)*]
type_param ::= compound_identifier
  | L_PAREN compound_identifier [(COMMA compound_identifier)*] R_PAREN
fun_def ::= VALUE [params] ASSIGN
params ::= (VALUE)*

compound_identifier ::= VALUE [(DOT VALUE)*]
